Index: ath/ath5k/phy.c
===================================================================
--- ath/ath5k/phy.c	(.../Comm%20Stack/src/kernel/ath)	(revision 176)
+++ ath/ath5k/phy.c	(.../GCDC/GCDCCommStackBranch/src/kernel/ath)	(working copy)
@@ -579,7 +579,7 @@
 	 * we set above */
 	if (ah->ah_rf_banks == NULL) {
 		ah->ah_rf_banks = kmalloc(sizeof(u32) * ah->ah_rf_banks_size,
-								GFP_KERNEL);
+								GFP_ATOMIC);
 		if (ah->ah_rf_banks == NULL) {
 			ATH5K_ERR(ah->ah_sc, "out of memory\n");
 			return -ENOMEM;
@@ -1097,6 +1097,7 @@
 	ah->ah_current_channel.center_freq = channel->center_freq;
 	ah->ah_current_channel.hw_value = channel->hw_value;
 	ah->ah_turbo = channel->hw_value == CHANNEL_T ? true : false;
+	ah->ah_halfrate = channel->hw_value == CHANNEL_P ? true : false;
 
 	return 0;
 }
@@ -1454,6 +1455,12 @@
 			spur_freq_sigma_delta = (spur_delta_phase >> 10);
 			symbol_width = AR5K_SPUR_SYMBOL_WIDTH_BASE_100Hz;
 			break;
+		case CHANNEL_P:
+			/* Both sample_freq and chip_freq are 20MHz */
+			spur_delta_phase = (spur_offset << 18) / 25;
+			spur_freq_sigma_delta = (spur_delta_phase >> 10);
+			symbol_width = AR5K_SPUR_SYMBOL_WIDTH_BASE_100Hz;
+			break;
 		case CHANNEL_G:
 			/* sample_freq -> 40MHz chip_freq -> 44MHz
 			 * (for b compatibility) */
@@ -1754,6 +1761,7 @@
 	case CHANNEL_A:
 	case CHANNEL_T:
 	case CHANNEL_XR:
+	case CHANNEL_P:
 		ee_mode = AR5K_EEPROM_MODE_11A;
 		break;
 	case CHANNEL_G:
@@ -2190,6 +2198,7 @@
 
 	switch (channel->hw_value & CHANNEL_MODES) {
 	case CHANNEL_A:
+	case CHANNEL_P:
 		ctl_mode |= AR5K_CTL_11A;
 		break;
 	case CHANNEL_G:
@@ -3026,6 +3035,7 @@
 
 	switch (channel->hw_value & CHANNEL_MODES) {
 	case CHANNEL_A:
+	case CHANNEL_P:
 	case CHANNEL_T:
 	case CHANNEL_XR:
 		ee_mode = AR5K_EEPROM_MODE_11A;
Index: ath/ath5k/attach.c
===================================================================
--- ath/ath5k/attach.c	(.../Comm%20Stack/src/kernel/ath)	(revision 176)
+++ ath/ath5k/attach.c	(.../GCDC/GCDCCommStackBranch/src/kernel/ath)	(working copy)
@@ -126,6 +126,7 @@
 	ah->ah_op_mode = NL80211_IFTYPE_STATION;
 	ah->ah_radar.r_enabled = AR5K_TUNE_RADAR_ALERT;
 	ah->ah_turbo = false;
+	ah->ah_halfrate = false;
 	ah->ah_txpower.txp_tpc = AR5K_TUNE_TPC_TXPOWER;
 	ah->ah_imr = 0;
 	ah->ah_atim_window = 0;
Index: ath/ath5k/base.c
===================================================================
--- ath/ath5k/base.c	(.../Comm%20Stack/src/kernel/ath)	(revision 176)
+++ ath/ath5k/base.c	(.../GCDC/GCDCCommStackBranch/src/kernel/ath)	(working copy)
@@ -276,7 +276,7 @@
 static void 	ath5k_detach(struct pci_dev *pdev,
 			struct ieee80211_hw *hw);
 /* Channel/mode setup */
-static inline short ath5k_ieee2mhz(short chan);
+static inline short ath5k_ieee2mhz(short chan, unsigned int chfreq);
 static unsigned int ath5k_copy_channels(struct ath5k_hw *ah,
 				struct ieee80211_channel *channels,
 				unsigned int mode,
@@ -540,6 +540,7 @@
 	sc->opmode = NL80211_IFTYPE_STATION;
 	sc->bintval = 1000;
 	mutex_init(&sc->lock);
+	spin_lock_init(&sc->restlock);
 	spin_lock_init(&sc->rxbuflock);
 	spin_lock_init(&sc->txbuflock);
 	spin_lock_init(&sc->block);
@@ -872,8 +873,11 @@
  * Convert IEEE channel number to MHz frequency.
  */
 static inline short
-ath5k_ieee2mhz(short chan)
+ath5k_ieee2mhz(short chan, unsigned int chfreq)
 {
+	if (chfreq == CHANNEL_5GHZ)
+		return (chan + 1000) * 5;
+
 	if (chan <= 14 || chan >= 27)
 		return ieee80211chan2mhz(chan);
 	else
@@ -909,13 +913,15 @@
 	case AR5K_MODE_11A:
 	case AR5K_MODE_11A_TURBO:
 		/* 1..220, but 2GHz frequencies are filtered by check_channel */
-		size = 220 ;
+		size = 241 ;
+		ch = -40;
 		chfreq = CHANNEL_5GHZ;
 		break;
 	case AR5K_MODE_11B:
 	case AR5K_MODE_11G:
 	case AR5K_MODE_11G_TURBO:
-		size = 26;
+		size = 70;
+		ch = -43;
 		chfreq = CHANNEL_2GHZ;
 		break;
 	default:
@@ -923,16 +929,17 @@
 		return 0;
 	}
 
-	for (i = 0, count = 0; i < size && max > 0; i++) {
-		ch = i + 1 ;
-		freq = ath5k_ieee2mhz(ch);
+	for (i = 0, count = 0; i < size && max > 0; i++, ch++) {
+		freq = ath5k_ieee2mhz(ch, chfreq);
 
 		/* Check if channel is supported by the chipset */
 		if (!ath5k_channel_ok(ah, freq, chfreq))
 			continue;
 
-		if (!modparam_all_channels && !ath5k_is_standard_channel(ch))
+		if (!modparam_all_channels && !ath5k_is_standard_channel(ch)) {
+			printk("ignored channel %d\n", ch);
 			continue;
+		}
 
 		/* Write channel info and increment counter */
 		channels[count].center_freq = freq;
@@ -940,6 +947,14 @@
 			IEEE80211_BAND_2GHZ : IEEE80211_BAND_5GHZ;
 		switch (mode) {
 		case AR5K_MODE_11A:
+			channels[count].hw_value = chfreq | CHANNEL_OFDM;
+			if (ch >= 170) {
+				channels[count].hw_value |= CHANNEL_HALF;
+				printk("Channel %d set to half rate\n", ch);
+			} else {
+				printk("Channel %d set to full rate\n", ch);
+			}
+			break;
 		case AR5K_MODE_11G:
 			channels[count].hw_value = chfreq | CHANNEL_OFDM;
 			break;
@@ -2090,6 +2105,10 @@
 
 	ATH5K_DBG_UNLIMIT(sc, ATH5K_DEBUG_BEACON, "in beacon_send\n");
 
+	/* disable beacon sending if beacon interval is zero */
+	if ((sc->bintval & AR5K_BEACON_PERIOD) == 0)
+		return;
+
 	if (unlikely(bf->skb == NULL || sc->opmode == NL80211_IFTYPE_STATION ||
 			sc->opmode == NL80211_IFTYPE_MONITOR)) {
 		ATH5K_WARN(sc, "bf=%p bf_skb=%p\n", bf, bf ? bf->skb : NULL);
@@ -2168,7 +2187,7 @@
 	u64 hw_tsf;
 
 	intval = sc->bintval & AR5K_BEACON_PERIOD;
-	if (WARN_ON(!intval))
+	if (!intval)
 		return;
 
 	/* beacon TSF converted to TU */
@@ -2656,6 +2675,7 @@
 {
 	struct ath5k_hw *ah = sc->ah;
 	int ret;
+	unsigned long flags;
 
 	ATH5K_DBG(sc, ATH5K_DEBUG_RESET, "resetting\n");
 
@@ -2667,7 +2687,11 @@
 		sc->curchan = chan;
 		sc->curband = &sc->sbands[chan->band];
 	}
+
+	spin_lock_irqsave(&sc->restlock, flags);
 	ret = ath5k_hw_reset(ah, sc->opmode, sc->curchan, chan != NULL);
+	spin_unlock_irqrestore(&sc->restlock, flags);
+
 	if (ret) {
 		ATH5K_ERR(sc, "can't reset hardware (%d)\n", ret);
 		goto err;
Index: ath/ath5k/base.h
===================================================================
--- ath/ath5k/base.h	(.../Comm%20Stack/src/kernel/ath)	(revision 176)
+++ ath/ath5k/base.h	(.../GCDC/GCDCCommStackBranch/src/kernel/ath)	(working copy)
@@ -103,9 +103,9 @@
 };
 
 #if CHAN_DEBUG
-#define ATH_CHAN_MAX	(26+26+26+200+200)
+#define ATH_CHAN_MAX	(26+26+26+200+240)
 #else
-#define ATH_CHAN_MAX	(14+14+14+252+20)
+#define ATH_CHAN_MAX	(14+14+14+252+240)
 #endif
 
 /* Software Carrier, keeps track of the driver state
@@ -160,6 +160,7 @@
 				led_on;		/* pin setting for LED on */
 
 	struct tasklet_struct	restq;		/* reset tasklet */
+	spinlock_t		restlock;	/* protect reset state */
 
 	unsigned int		rxbufsize;	/* rx size based on mtu */
 	struct list_head	rxbuf;		/* receive buffer */
Index: ath/ath5k/ath5k.h
===================================================================
--- ath/ath5k/ath5k.h	(.../Comm%20Stack/src/kernel/ath)	(revision 176)
+++ ath/ath5k/ath5k.h	(.../GCDC/GCDCCommStackBranch/src/kernel/ath)	(working copy)
@@ -693,6 +693,7 @@
 #define	CHANNEL_PASSIVE	0x0200	/* Only passive scan allowed */
 #define	CHANNEL_DYN	0x0400	/* Dynamic CCK-OFDM channel (for g operation) */
 #define	CHANNEL_XR	0x0800	/* XR channel */
+#define CHANNEL_HALF	0x1000	/* Half rate channel */
 
 #define	CHANNEL_A	(CHANNEL_5GHZ|CHANNEL_OFDM)
 #define	CHANNEL_B	(CHANNEL_2GHZ|CHANNEL_CCK)
@@ -702,9 +703,10 @@
 #define	CHANNEL_108A	CHANNEL_T
 #define	CHANNEL_108G	CHANNEL_TG
 #define	CHANNEL_X	(CHANNEL_5GHZ|CHANNEL_OFDM|CHANNEL_XR)
+#define CHANNEL_P	(CHANNEL_A|CHANNEL_HALF)
 
 #define	CHANNEL_ALL 	(CHANNEL_OFDM|CHANNEL_CCK|CHANNEL_2GHZ|CHANNEL_5GHZ| \
-		CHANNEL_TURBO)
+		CHANNEL_TURBO|CHANNEL_HALF)
 
 #define	CHANNEL_ALL_NOTURBO 	(CHANNEL_ALL & ~CHANNEL_TURBO)
 #define CHANNEL_MODES		CHANNEL_ALL
@@ -1032,6 +1034,7 @@
 	enum ath5k_power_mode	ah_power_mode;
 	struct ieee80211_channel ah_current_channel;
 	bool			ah_turbo;
+	bool			ah_halfrate;
 	bool			ah_calibration;
 	bool			ah_running;
 	bool			ah_single_chip;
@@ -1307,18 +1310,22 @@
  * Translate usec to hw clock units
  * TODO: Half/quarter rate
  */
-static inline unsigned int ath5k_hw_htoclock(unsigned int usec, bool turbo)
+static inline unsigned int ath5k_hw_htoclock(unsigned int usec, struct ath5k_hw *ah)
 {
-	return turbo ? (usec * 80) : (usec * 40);
+	if (ah->ah_turbo) return usec * 80;
+	if (ah->ah_halfrate) return usec * 20;
+	return usec * 40;
 }
 
 /*
  * Translate hw clock units to usec
  * TODO: Half/quarter rate
  */
-static inline unsigned int ath5k_hw_clocktoh(unsigned int clock, bool turbo)
+static inline unsigned int ath5k_hw_clocktoh(unsigned int clock, struct ath5k_hw *ah)
 {
-	return turbo ? (clock / 80) : (clock / 40);
+	if (ah->ah_turbo) return clock / 80;
+	if (ah->ah_halfrate) return clock / 20;
+	return clock / 40;
 }
 
 /*
Index: ath/ath5k/reset.c
===================================================================
--- ath/ath5k/reset.c	(.../Comm%20Stack/src/kernel/ath)	(revision 176)
+++ ath/ath5k/reset.c	(.../GCDC/GCDCCommStackBranch/src/kernel/ath)	(working copy)
@@ -62,7 +62,7 @@
 	 * we scale coef by shifting clock value by 24 for
 	 * better precision since we use integers */
 	/* TODO: Half/quarter rate */
-	clock =  ath5k_hw_htoclock(1, channel->hw_value & CHANNEL_TURBO);
+	clock =  ath5k_hw_htoclock(1, ah);
 
 	coef_scaled = ((5 * (clock << 24)) / 2) / channel->center_freq;
 
@@ -469,6 +469,12 @@
 				clock = AR5K_PHY_PLL_40MHZ_5413;
 			else
 				clock |= AR5K_PHY_PLL_40MHZ;
+				
+			if (flags & CHANNEL_HALF) {
+				/* mode |= AR5K_PHY_MODE_HALF_RATE; */
+				clock |= AR5K_PHY_PLL_HALF_RATE;
+				printk("Channel phy set to half rate\n");
+			}
 
 			if (flags & CHANNEL_OFDM)
 				mode |= AR5K_PHY_MODE_MOD_OFDM;
@@ -898,6 +904,13 @@
 			freq = AR5K_INI_RFGAIN_5GHZ;
 			ee_mode = AR5K_EEPROM_MODE_11A;
 			break;
+		case CHANNEL_P:
+			mode = AR5K_MODE_11A;
+			freq = AR5K_INI_RFGAIN_5GHZ;
+			ee_mode = AR5K_EEPROM_MODE_11A;
+			/* kludge to make sure all timings are set correctly */
+			ah->ah_halfrate = true;
+			break;
 		case CHANNEL_G:
 			mode = AR5K_MODE_11G;
 			freq = AR5K_INI_RFGAIN_2GHZ;
Index: ath/ath5k/caps.c
===================================================================
--- ath/ath5k/caps.c	(.../Comm%20Stack/src/kernel/ath)	(revision 176)
+++ ath/ath5k/caps.c	(.../GCDC/GCDCCommStackBranch/src/kernel/ath)	(working copy)
@@ -70,7 +70,7 @@
 		if (AR5K_EEPROM_HDR_11A(ee_header)) {
 			/* 4920 */
 			ah->ah_capabilities.cap_range.range_5ghz_min = 5005;
-			ah->ah_capabilities.cap_range.range_5ghz_max = 6100;
+			ah->ah_capabilities.cap_range.range_5ghz_max = 6000;
 
 			/* Set supported modes */
 			__set_bit(AR5K_MODE_11A,
Index: ath/ath5k/pcu.c
===================================================================
--- ath/ath5k/pcu.c	(.../Comm%20Stack/src/kernel/ath)	(revision 176)
+++ ath/ath5k/pcu.c	(.../GCDC/GCDCCommStackBranch/src/kernel/ath)	(working copy)
@@ -185,7 +185,7 @@
 	ATH5K_TRACE(ah->ah_sc);
 
 	return ath5k_hw_clocktoh(AR5K_REG_MS(ath5k_hw_reg_read(ah,
-			AR5K_TIME_OUT), AR5K_TIME_OUT_ACK), ah->ah_turbo);
+			AR5K_TIME_OUT), AR5K_TIME_OUT_ACK), ah);
 }
 
 /**
@@ -198,11 +198,11 @@
 {
 	ATH5K_TRACE(ah->ah_sc);
 	if (ath5k_hw_clocktoh(AR5K_REG_MS(0xffffffff, AR5K_TIME_OUT_ACK),
-			ah->ah_turbo) <= timeout)
+			ah) <= timeout)
 		return -EINVAL;
 
 	AR5K_REG_WRITE_BITS(ah, AR5K_TIME_OUT, AR5K_TIME_OUT_ACK,
-		ath5k_hw_htoclock(timeout, ah->ah_turbo));
+		ath5k_hw_htoclock(timeout, ah));
 
 	return 0;
 }
@@ -216,7 +216,7 @@
 {
 	ATH5K_TRACE(ah->ah_sc);
 	return ath5k_hw_clocktoh(AR5K_REG_MS(ath5k_hw_reg_read(ah,
-			AR5K_TIME_OUT), AR5K_TIME_OUT_CTS), ah->ah_turbo);
+			AR5K_TIME_OUT), AR5K_TIME_OUT_CTS), ah);
 }
 
 /**
@@ -229,11 +229,11 @@
 {
 	ATH5K_TRACE(ah->ah_sc);
 	if (ath5k_hw_clocktoh(AR5K_REG_MS(0xffffffff, AR5K_TIME_OUT_CTS),
-			ah->ah_turbo) <= timeout)
+			ah) <= timeout)
 		return -EINVAL;
 
 	AR5K_REG_WRITE_BITS(ah, AR5K_TIME_OUT, AR5K_TIME_OUT_CTS,
-			ath5k_hw_htoclock(timeout, ah->ah_turbo));
+			ath5k_hw_htoclock(timeout, ah));
 
 	return 0;
 }
Index: ath/ath5k/qcu.c
===================================================================
--- ath/ath5k/qcu.c	(.../Comm%20Stack/src/kernel/ath)	(revision 176)
+++ ath/ath5k/qcu.c	(.../GCDC/GCDCCommStackBranch/src/kernel/ath)	(working copy)
@@ -524,7 +524,7 @@
 	ATH5K_TRACE(ah->ah_sc);
 	if (ah->ah_version == AR5K_AR5210)
 		return ath5k_hw_clocktoh(ath5k_hw_reg_read(ah,
-				AR5K_SLOT_TIME) & 0xffff, ah->ah_turbo);
+				AR5K_SLOT_TIME) & 0xffff, ah);
 	else
 		return ath5k_hw_reg_read(ah, AR5K_DCU_GBL_IFS_SLOT) & 0xffff;
 }
@@ -540,7 +540,7 @@
 
 	if (ah->ah_version == AR5K_AR5210)
 		ath5k_hw_reg_write(ah, ath5k_hw_htoclock(slot_time,
-				ah->ah_turbo), AR5K_SLOT_TIME);
+				ah), AR5K_SLOT_TIME);
 	else
 		ath5k_hw_reg_write(ah, slot_time, AR5K_DCU_GBL_IFS_SLOT);
 
